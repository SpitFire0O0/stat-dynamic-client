/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["UserController-findAll"];
        put?: never;
        post: operations["UserController-create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/paged": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["UserController-findAllPaged"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["UserController-findOne"];
        put?: never;
        post?: never;
        delete: operations["UserController-remove"];
        options?: never;
        head?: never;
        patch: operations["UserController-update"];
        trace?: never;
    };
    "/api/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AuthController-login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AuthController-refresh"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/current": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["AuthController-current"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["AuthController-logout"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/contacts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ContactController-findAll"];
        put?: never;
        post: operations["ContactController-create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/contacts/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ContactController-findOne"];
        put?: never;
        post?: never;
        delete: operations["ContactController-delete"];
        options?: never;
        head?: never;
        patch: operations["ContactController-update"];
        trace?: never;
    };
    "/api/contacts/user/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ContactController-findByUserId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/feedbacks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["FeedbackController-findAll"];
        put?: never;
        post: operations["FeedbackController-create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/feedbacks/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["FeedbackController-findOne"];
        put?: never;
        post?: never;
        delete: operations["FeedbackController-remove"];
        options?: never;
        head?: never;
        patch: operations["FeedbackController-update"];
        trace?: never;
    };
    "/api/achievements": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["AchievementController-findAll"];
        put?: never;
        post: operations["AchievementController-create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/achievements/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["AchievementController-findOne"];
        put?: never;
        post?: never;
        delete: operations["AchievementController-remove"];
        options?: never;
        head?: never;
        patch: operations["AchievementController-update"];
        trace?: never;
    };
    "/api/achievements/user/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["AchievementController-findByUserId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/groups": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find All Groups
         * @description Find All Groups
         */
        get: operations["GroupController-findAll"];
        put?: never;
        /**
         * Create Group
         * @description Create Group
         */
        post: operations["GroupController-create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/groups/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find One Group
         * @description Find Group by ID
         */
        get: operations["GroupController-findOne"];
        put?: never;
        post?: never;
        /**
         * Delete Group
         * @description Delete Group by ID
         */
        delete: operations["GroupController-remove"];
        options?: never;
        head?: never;
        /**
         * Update Group
         * @description Update Group by ID
         */
        patch: operations["GroupController-update"];
        trace?: never;
    };
    "/api/groups/{id}/append": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Append User in Group
         * @description Append User in Group
         */
        post: operations["GroupController-appendUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/groups/{id}/remove": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove User from Group
         * @description Remove User from Group
         */
        delete: operations["GroupController-removeUser"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/course": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["CourseController-findAll"];
        put?: never;
        post: operations["CourseController-create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/course/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["CourseController-findOne"];
        put?: never;
        post?: never;
        delete: operations["CourseController-remove"];
        options?: never;
        head?: never;
        patch: operations["CourseController-update"];
        trace?: never;
    };
    "/api/discipline": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["DisciplineController-findAll"];
        put?: never;
        post: operations["DisciplineController-create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/discipline/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["DisciplineController-findOne"];
        put?: never;
        post?: never;
        delete: operations["DisciplineController-remove"];
        options?: never;
        head?: never;
        patch: operations["DisciplineController-update"];
        trace?: never;
    };
    "/api/theme": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ThemeController-findAll"];
        put?: never;
        post: operations["ThemeController-create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/theme/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ThemeController-findOne"];
        put?: never;
        post?: never;
        delete: operations["ThemeController-remove"];
        options?: never;
        head?: never;
        patch: operations["ThemeController-update"];
        trace?: never;
    };
    "/api/user-priority": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["UserPriorityController-findAll"];
        put?: never;
        post: operations["UserPriorityController-create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user-priority/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["UserPriorityController-findByUserID"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user-priority/{id}/{courseId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["UserPriorityController-findOne"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["UserPriorityController-update"];
        trace?: never;
    };
    "/api/user-priority/{id}/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["UserPriorityController-remove"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/grades": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GradeController-findAll"];
        put?: never;
        post: operations["GradeController-create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/grades/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GradeController-findOne"];
        put?: never;
        post?: never;
        delete: operations["GradeController-remove"];
        options?: never;
        head?: never;
        patch: operations["GradeController-update"];
        trace?: never;
    };
    "/api/meeting": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["MeetingController-findAll"];
        put?: never;
        post: operations["MeetingController-create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/meeting/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["MeetingController-findOne"];
        put?: never;
        post?: never;
        delete: operations["MeetingController-remove"];
        options?: never;
        head?: never;
        patch: operations["MeetingController-update"];
        trace?: never;
    };
    "/api/meeting/{id}/feedback": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["MeetingController-getFeedbacks"];
        put?: never;
        post: operations["MeetingController-appendFeedback"];
        delete: operations["MeetingController-removeFeedback"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/meeting/{id}/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["MeetingController-appendUser"];
        delete: operations["MeetingController-removeUser"];
        options?: never;
        head?: never;
        patch: operations["MeetingController-updateUser"];
        trace?: never;
    };
    "/api/homework": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["HomeworkController-findAll"];
        put?: never;
        post: operations["HomeworkController-create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/homework/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["HomeworkController-findOne"];
        put?: never;
        post?: never;
        delete: operations["HomeworkController-remove"];
        options?: never;
        head?: never;
        patch: operations["HomeworkController-update"];
        trace?: never;
    };
    "/api/homework/{id}/assign-student": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["HomeworkController-assignStudent"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/homework/{id}/remove-student": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["HomeworkController-removeStudent"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/files/upload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Загрузить файл */
        post: operations["FileController-uploadFile"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/files/logo/upload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Загрузить логотип пользователя */
        post: operations["FileController-uploadLogo"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/files/logo/update/{fileId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Обновить логотип пользователя */
        post: operations["FileController-updateLogo"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/files/logo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Получить логотип текущего пользователя */
        get: operations["FileController-getCurrentUserLogo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/files/logo/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Получить логотип пользователя по ID */
        get: operations["FileController-getUserLogo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/files/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Получить информацию о файле */
        get: operations["FileController-getFile"];
        put?: never;
        post?: never;
        /** Удалить файл */
        delete: operations["FileController-deleteFile"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/files/download/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Скачать файл */
        get: operations["FileController-downloadFile"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Health check */
        get: operations["HealthController-check"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/health/ready": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Readiness check */
        get: operations["HealthController-ready"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * @description User Gender
         * @enum {string}
         */
        Genders: "MALE" | "FEMALE";
        /**
         * @description User Permission
         * @enum {string}
         */
        Permissions: "ADMIN" | "TEACHER" | "PARENT" | "STUDENT";
        CreateUserDto: {
            /**
             * @description User Login
             * @example example@email.com
             */
            login: string;
            /**
             * @description User Password
             * @example !Qwert123
             */
            password: string;
            /**
             * @description User First name
             * @example Дмитрий
             */
            firstName: string;
            /**
             * @description User Last name
             * @example Иванов
             */
            lastName: string;
            /**
             * Format: date-time
             * @description User Birthday
             * @example 2010-01-01T03:00:00.002Z
             */
            birthday?: string;
            /**
             * @description User Phone number
             * @example 81230000000
             */
            phone?: string;
            /**
             * @description User Address
             * @example Россия, г. Москва, ул. Ленина, д. 10, кв. 10
             */
            address?: string;
            /**
             * @description User Logo ID
             * @example uuid-here
             */
            logo?: string;
            /**
             * @description User Gender
             * @example MALE
             */
            gender?: components["schemas"]["Genders"];
            /**
             * @description User Permission
             * @example USER
             */
            permissions?: components["schemas"]["Permissions"];
        };
        UserDto: {
            /**
             * @description User ID
             * @example f7c5208d-911c-43db-84aa-19eda9ae50a5
             */
            id: string;
            /**
             * @description User login
             * @example user@example.com
             */
            login: string;
            /**
             * @description First name
             * @example Иван
             */
            firstName: string;
            /**
             * @description Last name
             * @example Иванов
             */
            lastName: string;
            /**
             * Format: date-time
             * @description Birthday
             * @example 2010-01-01T03:00:00.000Z
             */
            birthday: string | null;
            /**
             * @description Phone number
             * @example 81230000000
             */
            phone: string | null;
            /**
             * @description Address
             * @example Россия, Москва, ул. Ленина, д. 10
             */
            address: string | null;
            /**
             * @description Logo File ID
             * @example 0a9f4d3e-bd6c-4c6a-bdf6-9d7a2f1e3c1b
             */
            logo: string | null;
            /**
             * @description Gender
             * @example MALE
             */
            gender: components["schemas"]["Genders"];
            /**
             * @description Permissions
             * @example STUDENT
             */
            permissions: components["schemas"]["Permissions"];
            /**
             * Format: date-time
             * @description Created at
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description Updated at
             */
            updatedAt: string;
        };
        ErrorDto: {
            /** @example 400 */
            statusCode: number;
            /** @example 2025-01-01T12:00:00.000Z */
            timestamp: string;
            /** @example /api/users */
            path: string;
            /** @example GET */
            method: string;
            /** @example Validation failed */
            message: Record<string, never>;
            /** @example Bad Request */
            error: string;
        };
        PaginatedDto: Record<string, never>;
        PageMetaDto: {
            /** @description Total number of items */
            totalItems?: number;
            /** @description Items on current page */
            itemCount?: number;
            /** @description Current page (1-based) */
            page?: number;
            /** @description Items per page */
            limit?: number;
            /** @description Total number of pages */
            totalPages?: number;
            /** @description Has previous page */
            hasPrevPage?: boolean;
            /** @description Has next page */
            hasNextPage?: boolean;
        };
        UpdateUserDto: {
            /**
             * @description User Login
             * @example example@email.com
             */
            login?: string;
            /**
             * @description User Password
             * @example !Qwert123
             */
            password?: string;
            /**
             * @description User First name
             * @example Дмитрий
             */
            firstName?: string;
            /**
             * @description User Last name
             * @example Иванов
             */
            lastName?: string;
            /**
             * Format: date-time
             * @description User Birthday
             * @example 2010-01-01T03:00:00.002Z
             */
            birthday?: string;
            /**
             * @description User Phone number
             * @example 81230000000
             */
            phone?: string;
            /**
             * @description User Address
             * @example Россия, г. Москва, ул. Ленина, д. 10, кв. 10
             */
            address?: string;
            /**
             * @description User Logo ID
             * @example uuid-here
             */
            logo?: string;
            /**
             * @description User Gender
             * @example MALE
             */
            gender?: components["schemas"]["Genders"];
            /**
             * @description User Permission
             * @example USER
             */
            permissions?: components["schemas"]["Permissions"];
        };
        AuthDTO: {
            /** @description Authenticated user */
            user: components["schemas"]["UserDto"];
            /**
             * @description JWT access token
             * @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
             */
            accessToken: string;
            /**
             * @description JWT refresh token
             * @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
             */
            refreshToken: string;
        };
        /**
         * @description Contact Type
         * @enum {string}
         */
        ContactTypes: "TELEGRAM" | "DISCORD" | "VKONTAKTE" | "WHATSAPP";
        CreateContactDto: {
            /**
             * @description Contact User ID
             * @example f7c5208d-911c-43db-84aa-19eda9ae50a5
             */
            userId: string;
            /**
             * @description Contact Type
             * @example TELEGRAM
             */
            type: components["schemas"]["ContactTypes"];
            /**
             * @description Contact Content
             * @example @example
             */
            content: string;
        };
        ContactDto: {
            /**
             * @description Contact ID
             * @example e3d2c1b0-a9f8-7654-3210-fedcba987654
             */
            id: string;
            /**
             * @description Contact type
             * @example TELEGRAM
             */
            type: components["schemas"]["ContactTypes"];
            /**
             * @description Contact value
             * @example @username
             */
            content: string;
            /**
             * @description User ID
             * @example f7c5208d-911c-43db-84aa-19eda9ae50a5
             */
            userId: string;
        };
        UpdateContactDto: {
            /**
             * @description Contact User ID
             * @example f7c5208d-911c-43db-84aa-19eda9ae50a5
             */
            userId?: string;
            /**
             * @description Contact Type
             * @example TELEGRAM
             */
            type?: components["schemas"]["ContactTypes"];
            /**
             * @description Contact Content
             * @example @example
             */
            content?: string;
        };
        /**
         * @description Feedback Grade
         * @enum {string}
         */
        Grades: "A" | "B" | "C";
        CreateFeedbackDto: {
            /**
             * @description Feedback User ID
             * @example f7c5208d-911c-43db-84aa-19eda9ae50a5
             */
            userId: string;
            /**
             * @description Feedback Title
             * @example Алгебра 01.01.2025
             */
            title: string;
            /**
             * @description Feedback Content
             * @example Занятие в целом прошло отлично, но я бы уделил больше внимания на решение уравнений у доски для более точного усвоения и понимания пройденного материала
             */
            content: string;
            /**
             * @description Feedback Grade
             * @example A
             */
            grade: components["schemas"]["Grades"];
        };
        FeedbackDto: {
            /**
             * @description Feedback ID
             * @example a1b2c3d4-e5f6-7a8b-9c0d-e1f2a3b4c5d6
             */
            id: string;
            /**
             * @description Title
             * @example Комментарий к занятию
             */
            title: string;
            /**
             * @description Content
             * @example Все прошло отлично
             */
            content: Record<string, never> | null;
            /**
             * @description Grade
             * @example A
             */
            grade: components["schemas"]["Grades"];
            /**
             * @description Author user ID
             * @example f7c5208d-911c-43db-84aa-19eda9ae50a5
             */
            userId: string;
            /**
             * Format: date-time
             * @description Created at
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description Updated at
             */
            updatedAt: string;
        };
        UpdateFeedbackDto: {
            /**
             * @description Feedback User ID
             * @example f7c5208d-911c-43db-84aa-19eda9ae50a5
             */
            userId?: string;
            /**
             * @description Feedback Title
             * @example Алгебра 01.01.2025
             */
            title?: string;
            /**
             * @description Feedback Content
             * @example Занятие в целом прошло отлично, но я бы уделил больше внимания на решение уравнений у доски для более точного усвоения и понимания пройденного материала
             */
            content?: string;
            /**
             * @description Feedback Grade
             * @example A
             */
            grade?: components["schemas"]["Grades"];
        };
        CreateAchievementDto: {
            /**
             * @description Achievement User ID
             * @example f7c5208d-911c-43db-84aa-19eda9ae50a5
             */
            userId: string;
            /**
             * @description Achievement Title
             * @example Олимпиада по программированию 2025
             */
            title: string;
            /**
             * @description Achievement Content
             * @example Описание олимпиады, даты проведения, условия и т.п.
             */
            content: string;
            /**
             * @description Achievement Grade
             * @example 90
             */
            grade: number;
        };
        AchievementDto: {
            /**
             * @description Achievement ID
             * @example e3d2c1b0-a9f8-7654-3210-fedcba987654
             */
            id: string;
            /**
             * @description Title
             * @example Олимпиада по математике
             */
            title: string;
            /**
             * @description Content
             * @example Победа в городском этапе
             */
            content: Record<string, never> | null;
            /**
             * @description Numeric grade
             * @example 5
             */
            grade: Record<string, never> | null;
            /**
             * @description User ID
             * @example f7c5208d-911c-43db-84aa-19eda9ae50a5
             */
            userId: string;
            /**
             * Format: date-time
             * @description Created at
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description Updated at
             */
            updatedAt: string;
        };
        UpdateAchievementDto: {
            /**
             * @description Achievement User ID
             * @example f7c5208d-911c-43db-84aa-19eda9ae50a5
             */
            userId?: string;
            /**
             * @description Achievement Title
             * @example Олимпиада по программированию 2025
             */
            title?: string;
            /**
             * @description Achievement Content
             * @example Описание олимпиады, даты проведения, условия и т.п.
             */
            content?: string;
            /**
             * @description Achievement Grade
             * @example 90
             */
            grade?: number;
        };
        CreateGroupDto: {
            /**
             * @description Group Name
             * @example 11-2024
             */
            name: string;
            /**
             * @description Group Slug
             * @example 11-2024
             */
            slug: string;
            /**
             * @description Description
             * @example Group for 11 class 2024 year
             */
            description?: string;
            /**
             * @description Curator ID of Group
             * @example f7c5208d-911c-43db-84aa-19eda9ae50a5
             */
            curatorId: string;
        };
        GroupDto: {
            /**
             * @description Group ID
             * @example b2f2b6fe-1b3d-4c1e-9a77-1d2f3a4b5c6d
             */
            id: string;
            /**
             * @description Group name
             * @example 11-2024
             */
            name: string;
            /**
             * @description Slug
             * @example 11-2024
             */
            slug: string;
            /**
             * @description Description
             * @example Группа 11 класса 2024
             */
            description: Record<string, never> | null;
            /**
             * @description Curator ID
             * @example f7c5208d-911c-43db-84aa-19eda9ae50a5
             */
            curatorId: string;
            /**
             * Format: date-time
             * @description Created at
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description Updated at
             */
            updatedAt: string;
        };
        UpdateGroupDto: {
            /**
             * @description Group Name
             * @example 11-2024
             */
            name?: string;
            /**
             * @description Group Slug
             * @example 11-2024
             */
            slug?: string;
            /**
             * @description Description
             * @example Group for 11 class 2024 year
             */
            description?: string;
            /**
             * @description Curator ID of Group
             * @example f7c5208d-911c-43db-84aa-19eda9ae50a5
             */
            curatorId?: string;
        };
        CreateCourseDto: {
            /**
             * @description Course Title
             * @example АЛГ-25
             */
            title: string;
            /**
             * @description Course Title
             * @example Курс Алгебры для потока студентов 2025 г.
             */
            description: string;
            /**
             * @description Course Academic year
             * @example 2025
             */
            academicYear: number;
            /**
             * @description Course Discipline ID
             * @example f7c5208d-911c-43db-84aa-19eda9ae50a5
             */
            disciplineId: string;
        };
        CourseDto: {
            /**
             * @description Course ID
             * @example d1a9a1c8-1a2b-3c4d-5e6f-7a8b9c0d1e2f
             */
            id: string;
            /**
             * @description Course title
             * @example АЛГ-25
             */
            title: string;
            /**
             * @description Course description
             * @example Курс Алгебры для потока 2025
             */
            description: Record<string, never> | null;
            /**
             * @description Academic year
             * @example 2025
             */
            academicYear: number;
            /**
             * @description Discipline ID
             * @example f7c5208d-911c-43db-84aa-19eda9ae50a5
             */
            disciplineId: string;
            /**
             * Format: date-time
             * @description Created at
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description Updated at
             */
            updatedAt: string;
        };
        UpdateCourseDto: {
            /**
             * @description Course Title
             * @example АЛГ-25
             */
            title?: string;
            /**
             * @description Course Title
             * @example Курс Алгебры для потока студентов 2025 г.
             */
            description?: string;
            /**
             * @description Course Academic year
             * @example 2025
             */
            academicYear?: number;
            /**
             * @description Course Discipline ID
             * @example f7c5208d-911c-43db-84aa-19eda9ae50a5
             */
            disciplineId?: string;
        };
        CreateDisciplineDto: {
            /**
             * @description Feedback Title
             * @example Алгебра
             */
            title: string;
        };
        DisciplineDto: {
            /**
             * @description Discipline ID
             * @example d7b3b1f2-5c6a-4e1f-9a77-1d2f3a4b5c6d
             */
            id: string;
            /**
             * @description Discipline title
             * @example Математика
             */
            title: string;
        };
        UpdateDisciplineDto: {
            /**
             * @description Feedback Title
             * @example Алгебра
             */
            title?: string;
        };
        CreateThemeDto: {
            /**
             * @description Theme Course ID
             * @example f7c5208d-911c-43db-84aa-19eda9ae50a5
             */
            courseId: string;
            /**
             * @description Theme Title
             * @example Логорифмы
             */
            title: string;
            /**
             * Format: date-time
             * @description Theme Date of begin
             * @example 2025-01-01T03:00:00.002Z
             */
            dateBegin: string;
            /**
             * Format: date-time
             * @description Theme Date of end
             * @example 2025-02-01T03:00:00.002Z
             */
            dateEnd: string;
        };
        ThemeDto: {
            /**
             * @description Theme ID
             * @example e3d2c1b0-a9f8-7654-3210-fedcba987654
             */
            id: string;
            /**
             * @description Course ID
             * @example c2a3e4d5-6b7c-8d9e-0f1a-2b3c4d5e6f70
             */
            courseId: string;
            /**
             * @description Theme title
             * @example Тема 1. Введение
             */
            title: string;
            /**
             * Format: date-time
             * @description Begin date
             */
            dateBegin?: string;
            /**
             * Format: date-time
             * @description End date
             */
            dateEnd?: string;
            /**
             * Format: date-time
             * @description Created at
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description Updated at
             */
            updatedAt: string;
        };
        UpdateThemeDto: {
            /**
             * @description Theme Course ID
             * @example f7c5208d-911c-43db-84aa-19eda9ae50a5
             */
            courseId?: string;
            /**
             * @description Theme Title
             * @example Логорифмы
             */
            title?: string;
            /**
             * Format: date-time
             * @description Theme Date of begin
             * @example 2025-01-01T03:00:00.002Z
             */
            dateBegin?: string;
            /**
             * Format: date-time
             * @description Theme Date of end
             * @example 2025-02-01T03:00:00.002Z
             */
            dateEnd?: string;
        };
        CreateUserPriorityDto: {
            /**
             * @description Priority Student grade
             * @example A
             */
            studentGrade: components["schemas"]["Grades"];
            /**
             * @description Priority Activity grade
             * @example B
             */
            actualityGrade: components["schemas"]["Grades"];
            /**
             * @description Priority User ID
             * @example f7c5208d-911c-43db-84aa-19eda9ae50a5
             */
            userId: string;
            /**
             * @description Priority Course ID
             * @example f7c5208d-911c-43db-84aa-19eda9ae50a5
             */
            courseId: string;
        };
        UserPriorityDto: {
            /**
             * @description Student self grade
             * @example B
             */
            studentGrade: components["schemas"]["Grades"];
            /**
             * @description Actual grade
             * @example A
             */
            actualityGrade: components["schemas"]["Grades"];
            /**
             * @description User ID
             * @example f7c5208d-911c-43db-84aa-19eda9ae50a5
             */
            userId: string;
            /**
             * @description Course ID
             * @example c2a3e4d5-6b7c-8d9e-0f1a-2b3c4d5e6f70
             */
            courseId: string;
        };
        UpdateUserPriorityDto: {
            /**
             * @description Priority Student grade
             * @example A
             */
            studentGrade?: components["schemas"]["Grades"];
            /**
             * @description Priority Activity grade
             * @example B
             */
            actualityGrade?: components["schemas"]["Grades"];
            /**
             * @description Priority User ID
             * @example f7c5208d-911c-43db-84aa-19eda9ae50a5
             */
            userId?: string;
            /**
             * @description Priority Course ID
             * @example f7c5208d-911c-43db-84aa-19eda9ae50a5
             */
            courseId?: string;
        };
        /**
         * @description Grade Type
         * @enum {string}
         */
        GradeTypes: "HOMEWORK" | "TEST" | "EXAM";
        CreateGradeDto: {
            /**
             * @description Grade Value
             * @example A
             */
            grade: components["schemas"]["Grades"];
            /**
             * @description Grade Type
             * @example HOMEWORK
             */
            type: components["schemas"]["GradeTypes"];
            /**
             * @description Grade Student ID
             * @example f7c5208d-911c-43db-84aa-19eda9ae50a5
             */
            studentId: string;
            /**
             * @description Grade Teacher ID
             * @example f7c5208d-911c-43db-84aa-19eda9ae50a5
             */
            teacherId: string;
            /**
             * @description Grade Course ID
             * @example f7c5208d-911c-43db-84aa-19eda9ae50a5
             */
            courseId: string;
            /**
             * @description Grade Theme ID
             * @example f7c5208d-911c-43db-84aa-19eda9ae50a5
             */
            themeId: string;
        };
        GradeDto: {
            /**
             * @description Grade ID
             * @example e1f2a3b4-c5d6-7e8f-9012-3456789abcde
             */
            id: string;
            /**
             * @description Grade value
             * @example B
             */
            grade: components["schemas"]["Grades"];
            /**
             * @description Grade type
             * @example TEST
             */
            type: components["schemas"]["GradeTypes"];
            /**
             * @description Student ID
             * @example f7c5208d-911c-43db-84aa-19eda9ae50a5
             */
            studentId: string;
            /**
             * @description Teacher ID
             * @example b1a2c3d4-e5f6-7a8b-9c0d-e1f2a3b4c5d6
             */
            teacherId: Record<string, never> | null;
            /**
             * @description Course ID
             * @example c2a3e4d5-6b7c-8d9e-0f1a-2b3c4d5e6f70
             */
            courseId: string;
            /**
             * @description Theme ID
             * @example a13b82d5-4e6f-7a8b-9c0d-e1f2a3b4c5d6
             */
            themeId: string;
            /**
             * Format: date-time
             * @description Created at
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description Updated at
             */
            updatedAt: string;
        };
        UpdateGradeDto: {
            /**
             * @description Grade Value
             * @example A
             */
            grade?: components["schemas"]["Grades"];
            /**
             * @description Grade Type
             * @example HOMEWORK
             */
            type?: components["schemas"]["GradeTypes"];
            /**
             * @description Grade Student ID
             * @example f7c5208d-911c-43db-84aa-19eda9ae50a5
             */
            studentId?: string;
            /**
             * @description Grade Teacher ID
             * @example f7c5208d-911c-43db-84aa-19eda9ae50a5
             */
            teacherId?: string;
            /**
             * @description Grade Course ID
             * @example f7c5208d-911c-43db-84aa-19eda9ae50a5
             */
            courseId?: string;
            /**
             * @description Grade Theme ID
             * @example f7c5208d-911c-43db-84aa-19eda9ae50a5
             */
            themeId?: string;
        };
        /**
         * @description Meeting Type
         * @enum {string}
         */
        MeetingTypes: "LESSON" | "EXAM" | "EVENT";
        CreateMeetingDto: {
            /**
             * @description Meeting Title
             * @example Математика
             */
            title: string;
            /**
             * @description Meeting Description
             * @example каб. 204, Иванов Д.С.
             */
            content: string;
            /**
             * @description Meeting Type
             * @example LESSON
             */
            type: components["schemas"]["MeetingTypes"];
            /**
             * Format: date-time
             * @description Meeting Date begin
             * @example 2025-01-01T03:00:00.002Z
             */
            dateBegin: string;
            /**
             * Format: date-time
             * @description Meeting Date duration
             * @example 100000
             */
            duration: string;
            /**
             * @description Meeting Curator ID
             * @example f7c5208d-911c-43db-84aa-19eda9ae50a5
             */
            curatorId: string;
        };
        MeetingDto: {
            /**
             * @description Meeting ID
             * @example e3d2c1b0-a9f8-7654-3210-fedcba987654
             */
            id: string;
            /**
             * @description Title
             * @example Урок 1
             */
            title: string;
            /**
             * @description Content
             * @example Вводная лекция
             */
            content: Record<string, never> | null;
            /**
             * @description Type
             * @example LESSON
             */
            type: components["schemas"]["MeetingTypes"];
            /**
             * Format: date-time
             * @description Start date
             */
            dateBegin: string;
            /**
             * Format: date-time
             * @description Duration
             */
            duration: string;
            /**
             * @description Curator ID
             * @example f7c5208d-911c-43db-84aa-19eda9ae50a5
             */
            curatorId: string;
            /**
             * Format: date-time
             * @description Created at
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description Updated at
             */
            updatedAt: string;
        };
        UpdateMeetingDto: {
            /**
             * @description Meeting Title
             * @example Математика
             */
            title?: string;
            /**
             * @description Meeting Description
             * @example каб. 204, Иванов Д.С.
             */
            content?: string;
            /**
             * @description Meeting Type
             * @example LESSON
             */
            type?: components["schemas"]["MeetingTypes"];
            /**
             * Format: date-time
             * @description Meeting Date begin
             * @example 2025-01-01T03:00:00.002Z
             */
            dateBegin?: string;
            /**
             * Format: date-time
             * @description Meeting Date duration
             * @example 100000
             */
            duration?: string;
            /**
             * @description Meeting Curator ID
             * @example f7c5208d-911c-43db-84aa-19eda9ae50a5
             */
            curatorId?: string;
        };
        MeetingUsersDto: {
            /**
             * @description Meeting ID
             * @example e3d2c1b0-a9f8-7654-3210-fedcba987654
             */
            meetingId: string;
            /**
             * @description User ID
             * @example f7c5208d-911c-43db-84aa-19eda9ae50a5
             */
            userId: string;
            /**
             * @description Attendance flag
             * @example true
             */
            is_attendace: boolean;
        };
        CreateHomeworkDto: {
            /**
             * @description Homework Title
             * @example Логорифмы #10
             */
            title: string;
            /**
             * @description Homework Description
             * @example Логорифмы #10 (Иванов Д.П.)
             */
            content: string;
            /**
             * Format: date-time
             * @description Homework Date begin
             * @example 2025-01-01T03:00:00.002Z
             */
            dateBegin: string;
            /**
             * Format: date-time
             * @description Homework Date end
             * @example 2025-02-01T03:00:00.002Z
             */
            dateEnd: string;
            /**
             * @description Homework Curator ID
             * @example f7c5208d-911c-43db-84aa-19eda9ae50a5
             */
            curatorId: string;
            /**
             * @description Meeting Theme ID
             * @example f7c5208d-911c-43db-84aa-19eda9ae50a5
             */
            themeId: string;
        };
        HomeworkDto: {
            /**
             * @description Homework ID
             * @example e3d2c1b0-a9f8-7654-3210-fedcba987654
             */
            id: string;
            /**
             * @description Title
             * @example ДЗ №1
             */
            title: string;
            /**
             * @description Content
             * @example Решить задачи 1-10
             */
            content: Record<string, never> | null;
            /**
             * Format: date-time
             * @description Start date
             */
            dateBegin: string;
            /**
             * Format: date-time
             * @description End date
             */
            dateEnd: string;
            /**
             * @description Curator user ID
             * @example f7c5208d-911c-43db-84aa-19eda9ae50a5
             */
            curatorId: string;
            /**
             * @description Theme ID
             * @example a13b82d5-4e6f-7a8b-9c0d-e1f2a3b4c5d6
             */
            themeId: string;
            /**
             * Format: date-time
             * @description Created at
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description Updated at
             */
            updatedAt: string;
        };
        UpdateHomeworkDto: {
            /**
             * @description Homework Title
             * @example Логорифмы #10
             */
            title?: string;
            /**
             * @description Homework Description
             * @example Логорифмы #10 (Иванов Д.П.)
             */
            content?: string;
            /**
             * Format: date-time
             * @description Homework Date begin
             * @example 2025-01-01T03:00:00.002Z
             */
            dateBegin?: string;
            /**
             * Format: date-time
             * @description Homework Date end
             * @example 2025-02-01T03:00:00.002Z
             */
            dateEnd?: string;
            /**
             * @description Homework Curator ID
             * @example f7c5208d-911c-43db-84aa-19eda9ae50a5
             */
            curatorId?: string;
            /**
             * @description Meeting Theme ID
             * @example f7c5208d-911c-43db-84aa-19eda9ae50a5
             */
            themeId?: string;
        };
        /**
         * @description Тип файла
         * @enum {string}
         */
        FileTypes: "MEDIA" | "DOC";
        FileDto: {
            /** @description ID файла */
            id: string;
            /** @description Путь к файлу */
            path: string;
            /** @description Тип файла */
            type: components["schemas"]["FileTypes"];
            /**
             * Format: date-time
             * @description Дата создания
             */
            createdAt: string;
            /** @description URL для доступа к файлу */
            url: string;
        };
        UploadResponseDto: {
            /** @description Сообщение об успешной загрузке */
            message: string;
            /** @description Информация о загруженном файле */
            file: components["schemas"]["FileDto"];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    "UserController-findAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserDto"][];
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorDto"];
                };
            };
        };
    };
    "UserController-create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateUserDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserDto"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorDto"];
                };
            };
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorDto"];
                };
            };
        };
    };
    "UserController-findAllPaged": {
        parameters: {
            query?: {
                /** @description Page number (1-based) */
                page?: number;
                /** @description Items per page */
                limit?: number;
                /** @description Sort by field */
                sortBy?: string;
                /** @description Sort order */
                sortOrder?: "asc" | "desc";
                /** @description Full-text query (contains, case-insensitive) */
                q?: string;
                /** @description Comma-separated fields for search (used with q) */
                searchBy?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["UserDto"][];
                        meta?: components["schemas"]["PageMetaDto"];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorDto"];
                };
            };
        };
    };
    "UserController-findOne": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserDto"];
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorDto"];
                };
            };
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorDto"];
                };
            };
        };
    };
    "UserController-remove": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserDto"];
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorDto"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorDto"];
                };
            };
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorDto"];
                };
            };
        };
    };
    "UserController-update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateUserDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserDto"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorDto"];
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorDto"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorDto"];
                };
            };
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorDto"];
                };
            };
        };
    };
    "AuthController-login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthDTO"];
                };
            };
        };
    };
    "AuthController-refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    "AuthController-current": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserDto"];
                };
            };
        };
    };
    "AuthController-logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    "ContactController-findAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContactDto"][];
                };
            };
        };
    };
    "ContactController-create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateContactDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContactDto"];
                };
            };
        };
    };
    "ContactController-findOne": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContactDto"];
                };
            };
        };
    };
    "ContactController-delete": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContactDto"];
                };
            };
        };
    };
    "ContactController-update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateContactDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContactDto"];
                };
            };
        };
    };
    "ContactController-findByUserId": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContactDto"][];
                };
            };
        };
    };
    "FeedbackController-findAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FeedbackDto"][];
                };
            };
        };
    };
    "FeedbackController-create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateFeedbackDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FeedbackDto"];
                };
            };
        };
    };
    "FeedbackController-findOne": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FeedbackDto"];
                };
            };
        };
    };
    "FeedbackController-remove": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FeedbackDto"];
                };
            };
        };
    };
    "FeedbackController-update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateFeedbackDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FeedbackDto"];
                };
            };
        };
    };
    "AchievementController-findAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AchievementDto"][];
                };
            };
        };
    };
    "AchievementController-create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateAchievementDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AchievementDto"];
                };
            };
        };
    };
    "AchievementController-findOne": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AchievementDto"];
                };
            };
        };
    };
    "AchievementController-remove": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AchievementDto"];
                };
            };
        };
    };
    "AchievementController-update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateAchievementDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AchievementDto"];
                };
            };
        };
    };
    "AchievementController-findByUserId": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AchievementDto"][];
                };
            };
        };
    };
    "GroupController-findAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Find All Groups successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GroupDto"][];
                };
            };
            /** @description Groups Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "GroupController-create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateGroupDto"];
            };
        };
        responses: {
            /** @description Group created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GroupDto"];
                };
            };
        };
    };
    "GroupController-findOne": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Find Group by ID successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GroupDto"];
                };
            };
            /** @description Group by ID Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "GroupController-remove": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Delete Group by ID successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GroupDto"];
                };
            };
        };
    };
    "GroupController-update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateGroupDto"];
            };
        };
        responses: {
            /** @description Update Group by ID successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GroupDto"];
                };
            };
        };
    };
    "GroupController-appendUser": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Append User in Group successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "GroupController-removeUser": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Remove User from Group successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "CourseController-findAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CourseDto"][];
                };
            };
        };
    };
    "CourseController-create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateCourseDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CourseDto"];
                };
            };
        };
    };
    "CourseController-findOne": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CourseDto"];
                };
            };
        };
    };
    "CourseController-remove": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CourseDto"];
                };
            };
        };
    };
    "CourseController-update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateCourseDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CourseDto"];
                };
            };
        };
    };
    "DisciplineController-findAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DisciplineDto"][];
                };
            };
        };
    };
    "DisciplineController-create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateDisciplineDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DisciplineDto"];
                };
            };
        };
    };
    "DisciplineController-findOne": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DisciplineDto"];
                };
            };
        };
    };
    "DisciplineController-remove": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DisciplineDto"];
                };
            };
        };
    };
    "DisciplineController-update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateDisciplineDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DisciplineDto"];
                };
            };
        };
    };
    "ThemeController-findAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ThemeDto"][];
                };
            };
        };
    };
    "ThemeController-create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateThemeDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ThemeDto"];
                };
            };
        };
    };
    "ThemeController-findOne": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ThemeDto"];
                };
            };
        };
    };
    "ThemeController-remove": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ThemeDto"];
                };
            };
        };
    };
    "ThemeController-update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateThemeDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ThemeDto"];
                };
            };
        };
    };
    "UserPriorityController-findAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserPriorityDto"][];
                };
            };
        };
    };
    "UserPriorityController-create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateUserPriorityDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserPriorityDto"];
                };
            };
        };
    };
    "UserPriorityController-findByUserID": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserPriorityDto"];
                };
            };
        };
    };
    "UserPriorityController-findOne": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserPriorityDto"];
                };
            };
        };
    };
    "UserPriorityController-update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
                userId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateUserPriorityDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserPriorityDto"];
                };
            };
        };
    };
    "UserPriorityController-remove": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserPriorityDto"];
                };
            };
        };
    };
    "GradeController-findAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GradeDto"][];
                };
            };
        };
    };
    "GradeController-create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateGradeDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GradeDto"];
                };
            };
        };
    };
    "GradeController-findOne": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GradeDto"];
                };
            };
        };
    };
    "GradeController-remove": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GradeDto"];
                };
            };
        };
    };
    "GradeController-update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateGradeDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GradeDto"];
                };
            };
        };
    };
    "MeetingController-findAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MeetingDto"][];
                };
            };
        };
    };
    "MeetingController-create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateMeetingDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MeetingDto"];
                };
            };
        };
    };
    "MeetingController-findOne": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MeetingDto"];
                };
            };
        };
    };
    "MeetingController-remove": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MeetingDto"];
                };
            };
        };
    };
    "MeetingController-update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateMeetingDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MeetingDto"];
                };
            };
        };
    };
    "MeetingController-getFeedbacks": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "MeetingController-appendFeedback": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MeetingDto"];
                };
            };
        };
    };
    "MeetingController-removeFeedback": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MeetingDto"];
                };
            };
        };
    };
    "MeetingController-appendUser": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MeetingDto"];
                };
            };
        };
    };
    "MeetingController-removeUser": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MeetingDto"];
                };
            };
        };
    };
    "MeetingController-updateUser": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MeetingUsersDto"];
                };
            };
        };
    };
    "HomeworkController-findAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HomeworkDto"][];
                };
            };
        };
    };
    "HomeworkController-create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateHomeworkDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HomeworkDto"];
                };
            };
        };
    };
    "HomeworkController-findOne": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HomeworkDto"];
                };
            };
        };
    };
    "HomeworkController-remove": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HomeworkDto"];
                };
            };
        };
    };
    "HomeworkController-update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateHomeworkDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HomeworkDto"];
                };
            };
        };
    };
    "HomeworkController-assignStudent": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Student assigned to homework successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "HomeworkController-removeStudent": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Student removed from homework successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "FileController-uploadFile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": {
                    /**
                     * Format: binary
                     * @description Файл для загрузки
                     */
                    file?: string;
                    /**
                     * @description Тип файла
                     * @enum {string}
                     */
                    type?: "MEDIA" | "DOC";
                    /** @description Описание файла */
                    description?: string;
                };
            };
        };
        responses: {
            /** @description Файл успешно загружен */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UploadResponseDto"];
                };
            };
        };
    };
    "FileController-uploadLogo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": {
                    /**
                     * Format: binary
                     * @description Логотип пользователя (изображение)
                     */
                    logo?: string;
                    /** @description Описание логотипа */
                    description?: string;
                };
            };
        };
        responses: {
            /** @description Логотип успешно загружен */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UploadResponseDto"];
                };
            };
        };
    };
    "FileController-updateLogo": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                fileId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Логотип успешно обновлен */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FileDto"];
                };
            };
        };
    };
    "FileController-getCurrentUserLogo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Логотип найден */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FileDto"];
                };
            };
            /** @description Логотип не найден */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "FileController-getUserLogo": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Логотип найден */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FileDto"];
                };
            };
            /** @description Логотип не найден */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "FileController-getFile": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Файл найден */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FileDto"];
                };
            };
            /** @description Файл не найден */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "FileController-deleteFile": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Файл успешно удален */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "FileController-downloadFile": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Файл успешно скачан */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Файл не найден */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "HealthController-check": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Service is healthy */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service is unhealthy */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "HealthController-ready": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Service is ready */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
