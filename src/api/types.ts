/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["UserController-findAll"];
        put?: never;
        post: operations["UserController-create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["UserController-findOne"];
        put?: never;
        post?: never;
        delete: operations["UserController-remove"];
        options?: never;
        head?: never;
        patch: operations["UserController-update"];
        trace?: never;
    };
    "/api/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AuthController-login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AuthController-refresh"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/current": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["AuthController-current"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["AuthController-logout"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/contacts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ContactController-findAll"];
        put?: never;
        post: operations["ContactController-create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/contacts/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ContactController-findOne"];
        put?: never;
        post?: never;
        delete: operations["ContactController-delete"];
        options?: never;
        head?: never;
        patch: operations["ContactController-update"];
        trace?: never;
    };
    "/api/contacts/user/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ContactController-findByUserId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/feedbacks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["FeedbackController-findAll"];
        put?: never;
        post: operations["FeedbackController-create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/feedbacks/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["FeedbackController-findOne"];
        put?: never;
        post?: never;
        delete: operations["FeedbackController-remove"];
        options?: never;
        head?: never;
        patch: operations["FeedbackController-update"];
        trace?: never;
    };
    "/api/achievements": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["AchievementController-findAll"];
        put?: never;
        post: operations["AchievementController-create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/achievements/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["AchievementController-findOne"];
        put?: never;
        post?: never;
        delete: operations["AchievementController-remove"];
        options?: never;
        head?: never;
        patch: operations["AchievementController-update"];
        trace?: never;
    };
    "/api/achievements/user/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["AchievementController-findByUserId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/groups": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find All Groups
         * @description Find All Groups
         */
        get: operations["GroupController-findAll"];
        put?: never;
        /**
         * Create Group
         * @description Create Group
         */
        post: operations["GroupController-create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/groups/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find One Group
         * @description Find Group by ID
         */
        get: operations["GroupController-findOne"];
        put?: never;
        post?: never;
        /**
         * Delete Group
         * @description Delete Group by ID
         */
        delete: operations["GroupController-remove"];
        options?: never;
        head?: never;
        /**
         * Update Group
         * @description Update Group by ID
         */
        patch: operations["GroupController-update"];
        trace?: never;
    };
    "/api/groups/{id}/append": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Append User in Group
         * @description Append User in Group
         */
        post: operations["GroupController-appendUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/groups/{id}/remove": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove User from Group
         * @description Remove User from Group
         */
        delete: operations["GroupController-removeUser"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/course": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["CourseController-findAll"];
        put?: never;
        post: operations["CourseController-create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/course/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["CourseController-findOne"];
        put?: never;
        post?: never;
        delete: operations["CourseController-remove"];
        options?: never;
        head?: never;
        patch: operations["CourseController-update"];
        trace?: never;
    };
    "/api/discipline": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["DisciplineController-findAll"];
        put?: never;
        post: operations["DisciplineController-create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/discipline/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["DisciplineController-findOne"];
        put?: never;
        post?: never;
        delete: operations["DisciplineController-remove"];
        options?: never;
        head?: never;
        patch: operations["DisciplineController-update"];
        trace?: never;
    };
    "/api/theme": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ThemeController-findAll"];
        put?: never;
        post: operations["ThemeController-create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/theme/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ThemeController-findOne"];
        put?: never;
        post?: never;
        delete: operations["ThemeController-remove"];
        options?: never;
        head?: never;
        patch: operations["ThemeController-update"];
        trace?: never;
    };
    "/api/user-priority": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["UserPriorityController-findAll"];
        put?: never;
        post: operations["UserPriorityController-create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user-priority/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["UserPriorityController-findByUserID"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user-priority/{id}/{courseId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["UserPriorityController-findOne"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["UserPriorityController-update"];
        trace?: never;
    };
    "/api/user-priority/{id}/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["UserPriorityController-remove"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/grades": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GradeController-findAll"];
        put?: never;
        post: operations["GradeController-create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/grades/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GradeController-findOne"];
        put?: never;
        post?: never;
        delete: operations["GradeController-remove"];
        options?: never;
        head?: never;
        patch: operations["GradeController-update"];
        trace?: never;
    };
    "/api/meeting": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["MeetingController-findAll"];
        put?: never;
        post: operations["MeetingController-create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/meeting/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["MeetingController-findOne"];
        put?: never;
        post?: never;
        delete: operations["MeetingController-remove"];
        options?: never;
        head?: never;
        patch: operations["MeetingController-update"];
        trace?: never;
    };
    "/api/meeting/{id}/feedback": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["MeetingController-getFeedbacks"];
        put?: never;
        post: operations["MeetingController-appendFeedback"];
        delete: operations["MeetingController-removeFeedback"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/meeting/{id}/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["MeetingController-appendUser"];
        delete: operations["MeetingController-removeUser"];
        options?: never;
        head?: never;
        patch: operations["MeetingController-updateUser"];
        trace?: never;
    };
    "/api/homework": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["HomeworkController-findAll"];
        put?: never;
        post: operations["HomeworkController-create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/homework/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["HomeworkController-findOne"];
        put?: never;
        post?: never;
        delete: operations["HomeworkController-remove"];
        options?: never;
        head?: never;
        patch: operations["HomeworkController-update"];
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        CreateUserDto: {
            /**
             * @description User Login
             * @example example@email.com
             */
            login: string;
            /**
             * @description User Password
             * @example !Qwert123
             */
            password: string;
            /**
             * @description User First name
             * @example Дмитрий
             */
            firstName: string;
            /**
             * @description User Last name
             * @example Иванов
             */
            lastName: string;
            /**
             * Format: date-time
             * @description User Birthday
             * @example 2010-01-01T03:00:00.002Z
             */
            birthday: string;
            /**
             * @description User Phone number
             * @example 81230000000
             */
            phone: string;
            /**
             * @description User Address
             * @example Россия, г. Москва, ул. Ленина, д. 10, кв. 10
             */
            address: string;
            /**
             * @description User Gender
             * @example MALE
             * @enum {string}
             */
            gender: "MALE" | "FEMALE";
            /**
             * @description User Permission
             * @example USER
             * @enum {string}
             */
            permissions: "ADMIN" | "TEACHER" | "PARENT" | "STUDENT";
        };
        UpdateUserDto: Record<string, never>;
        CreateContactDto: {
            /**
             * @description Contact User ID
             * @example f7c5208d-911c-43db-84aa-19eda9ae50a5
             */
            userId: string;
            /**
             * @description Contact Type
             * @example TELEGRAM
             * @enum {string}
             */
            type: "TELEGRAM" | "DISCORD" | "VKONTAKTE" | "WHATSAPP";
            /**
             * @description Contact Content
             * @example @example
             */
            content: string;
        };
        UpdateContactDto: Record<string, never>;
        CreateFeedbackDto: {
            /**
             * @description Feedback User ID
             * @example f7c5208d-911c-43db-84aa-19eda9ae50a5
             */
            userId: string;
            /**
             * @description Feedback Title
             * @example Алгебра 01.01.2025
             */
            title: string;
            /**
             * @description Feedback Content
             * @example Занятие в целом прошло отлично, но я бы уделил больше внимания на решение уравнений у доски для более точного усвоения и понимания пройденного материала
             */
            content: string;
            /**
             * @description Feedback Grade
             * @example A
             * @enum {string}
             */
            grade: "A" | "B" | "C";
        };
        UpdateFeedbackDto: Record<string, never>;
        CreateAchievementDto: {
            /**
             * @description Achievement User ID
             * @example f7c5208d-911c-43db-84aa-19eda9ae50a5
             */
            userId: string;
            /**
             * @description Achievement Title
             * @example Олимпиада по программированию 2025
             */
            title: string;
            /**
             * @description Achievement Content
             * @example Описание олимпиады, даты проведения, условия и т.п.
             */
            content: string;
            /**
             * @description Achievement Grade
             * @example 90
             */
            grade: number;
        };
        UpdateAchievementDto: Record<string, never>;
        CreateGroupDto: {
            /**
             * @description Group Name
             * @example 11-2024
             */
            name: string;
            /**
             * @description Group Slug
             * @example 11-2024
             */
            slug: string;
            /**
             * @description Description
             * @example Group for 11 class 2024 year
             */
            description?: string;
            /**
             * @description Curator ID of Group
             * @example f7c5208d-911c-43db-84aa-19eda9ae50a5
             */
            curatorId: string;
        };
        GroupResponse: {
            /**
             * @description Group ID
             * @example 5bce5e72-925c-4f5c-a6f6-886257d4170e
             */
            id: string;
            /**
             * @description Group Name
             * @example 11-2024
             */
            name: string;
            /**
             * @description Group Slug
             * @example 11-2024
             */
            slug: string;
            /**
             * @description Description
             * @example Group for 11 class 2024 year
             */
            description?: string;
            /**
             * @description Curator ID of Group
             * @example f7c5208d-911c-43db-84aa-19eda9ae50a5
             */
            curatorId: string;
        };
        UpdateGroupDto: Record<string, never>;
        CreateCourseDto: {
            /**
             * @description Course Title
             * @example АЛГ-25
             */
            title: string;
            /**
             * @description Course Title
             * @example Курс Алгебры для потока студентов 2025 г.
             */
            description: string;
            /**
             * @description Course Academic year
             * @example 2025
             */
            academicYear: number;
            /**
             * @description Course Discipline ID
             * @example f7c5208d-911c-43db-84aa-19eda9ae50a5
             */
            disciplineId: string;
        };
        UpdateCourseDto: {
            /**
             * @description Course Title
             * @example АЛГ-25
             */
            title?: string;
            /**
             * @description Course Title
             * @example Курс Алгебры для потока студентов 2025 г.
             */
            description?: string;
            /**
             * @description Course Academic year
             * @example 2025
             */
            academicYear?: number;
            /**
             * @description Course Discipline ID
             * @example f7c5208d-911c-43db-84aa-19eda9ae50a5
             */
            disciplineId?: string;
        };
        CreateDisciplineDto: {
            /**
             * @description Feedback Title
             * @example Алгебра
             */
            title: string;
        };
        UpdateDisciplineDto: {
            /**
             * @description Feedback Title
             * @example Алгебра
             */
            title?: string;
        };
        CreateThemeDto: {
            /**
             * @description Theme Course ID
             * @example f7c5208d-911c-43db-84aa-19eda9ae50a5
             */
            courseId: string;
            /**
             * @description Theme Title
             * @example Логорифмы
             */
            title: string;
            /**
             * Format: date-time
             * @description Theme Date of begin
             * @example 2025-01-01T03:00:00.002Z
             */
            dateBegin: string;
            /**
             * Format: date-time
             * @description Theme Date of end
             * @example 2025-02-01T03:00:00.002Z
             */
            dateEnd: string;
        };
        UpdateThemeDto: {
            /**
             * @description Theme Course ID
             * @example f7c5208d-911c-43db-84aa-19eda9ae50a5
             */
            courseId?: string;
            /**
             * @description Theme Title
             * @example Логорифмы
             */
            title?: string;
            /**
             * Format: date-time
             * @description Theme Date of begin
             * @example 2025-01-01T03:00:00.002Z
             */
            dateBegin?: string;
            /**
             * Format: date-time
             * @description Theme Date of end
             * @example 2025-02-01T03:00:00.002Z
             */
            dateEnd?: string;
        };
        CreateUserPriorityDto: {
            /**
             * @description Priority Student grade
             * @example A
             * @enum {string}
             */
            studentGrade: "A" | "B" | "C";
            /**
             * @description Priority Activity grade
             * @example B
             * @enum {string}
             */
            actualityGrade: "A" | "B" | "C";
            /**
             * @description Priority User ID
             * @example f7c5208d-911c-43db-84aa-19eda9ae50a5
             */
            userId: string;
            /**
             * @description Priority Course ID
             * @example f7c5208d-911c-43db-84aa-19eda9ae50a5
             */
            courseId: string;
        };
        UpdateUserPriorityDto: {
            /**
             * @description Priority Student grade
             * @example A
             * @enum {string}
             */
            studentGrade?: "A" | "B" | "C";
            /**
             * @description Priority Activity grade
             * @example B
             * @enum {string}
             */
            actualityGrade?: "A" | "B" | "C";
            /**
             * @description Priority User ID
             * @example f7c5208d-911c-43db-84aa-19eda9ae50a5
             */
            userId?: string;
            /**
             * @description Priority Course ID
             * @example f7c5208d-911c-43db-84aa-19eda9ae50a5
             */
            courseId?: string;
        };
        CreateGradeDto: {
            /**
             * @description Grade Value
             * @example A
             */
            grade: string;
            /**
             * @description Grade Type
             * @example HOMEWORK
             * @enum {string}
             */
            type: "HOMEWORK" | "TEST" | "EXAM";
            /**
             * @description Grade Student ID
             * @example f7c5208d-911c-43db-84aa-19eda9ae50a5
             */
            studentId: string;
            /**
             * @description Grade Teacher ID
             * @example f7c5208d-911c-43db-84aa-19eda9ae50a5
             */
            teacherId: string;
            /**
             * @description Grade Course ID
             * @example f7c5208d-911c-43db-84aa-19eda9ae50a5
             */
            courseId: string;
            /**
             * @description Grade Theme ID
             * @example f7c5208d-911c-43db-84aa-19eda9ae50a5
             */
            themeId: string;
        };
        UpdateGradeDto: {
            /**
             * @description Grade Value
             * @example A
             */
            grade?: string;
            /**
             * @description Grade Type
             * @example HOMEWORK
             * @enum {string}
             */
            type?: "HOMEWORK" | "TEST" | "EXAM";
            /**
             * @description Grade Student ID
             * @example f7c5208d-911c-43db-84aa-19eda9ae50a5
             */
            studentId?: string;
            /**
             * @description Grade Teacher ID
             * @example f7c5208d-911c-43db-84aa-19eda9ae50a5
             */
            teacherId?: string;
            /**
             * @description Grade Course ID
             * @example f7c5208d-911c-43db-84aa-19eda9ae50a5
             */
            courseId?: string;
            /**
             * @description Grade Theme ID
             * @example f7c5208d-911c-43db-84aa-19eda9ae50a5
             */
            themeId?: string;
        };
        CreateMeetingDto: {
            /**
             * @description Meeting Title
             * @example Математика
             */
            title: string;
            /**
             * @description Meeting Description
             * @example каб. 204, Иванов Д.С.
             */
            content: string;
            /**
             * @description Meeting Type
             * @example LESSON
             * @enum {string}
             */
            type: "LESSON" | "EXAM" | "EVENT";
            /**
             * Format: date-time
             * @description Meeting Date begin
             * @example 2025-01-01T03:00:00.002Z
             */
            dateBegin: string;
            /**
             * Format: date-time
             * @description Meeting Date duration
             * @example 100000
             */
            duration: string;
            /**
             * @description Meeting Curator ID
             * @example f7c5208d-911c-43db-84aa-19eda9ae50a5
             */
            curatorId: string;
        };
        UpdateMeetingDto: {
            /**
             * @description Meeting Title
             * @example Математика
             */
            title?: string;
            /**
             * @description Meeting Description
             * @example каб. 204, Иванов Д.С.
             */
            content?: string;
            /**
             * @description Meeting Type
             * @example LESSON
             * @enum {string}
             */
            type?: "LESSON" | "EXAM" | "EVENT";
            /**
             * Format: date-time
             * @description Meeting Date begin
             * @example 2025-01-01T03:00:00.002Z
             */
            dateBegin?: string;
            /**
             * Format: date-time
             * @description Meeting Date duration
             * @example 100000
             */
            duration?: string;
            /**
             * @description Meeting Curator ID
             * @example f7c5208d-911c-43db-84aa-19eda9ae50a5
             */
            curatorId?: string;
        };
        CreateHomeworkDto: {
            /**
             * @description Homework Title
             * @example Логорифмы #10
             */
            title: string;
            /**
             * @description Homework Description
             * @example Логорифмы #10 (Иванов Д.П.)
             */
            content: string;
            /**
             * Format: date-time
             * @description Homework Date begin
             * @example 2025-01-01T03:00:00.002Z
             */
            dateBegin: string;
            /**
             * Format: date-time
             * @description Homework Date end
             * @example 2025-02-01T03:00:00.002Z
             */
            dateEnd: string;
            /**
             * @description Homework Curator ID
             * @example f7c5208d-911c-43db-84aa-19eda9ae50a5
             */
            curatorId: string;
            /**
             * @description Meeting Theme ID
             * @example f7c5208d-911c-43db-84aa-19eda9ae50a5
             */
            themeId: string;
        };
        UpdateHomeworkDto: {
            /**
             * @description Homework Title
             * @example Логорифмы #10
             */
            title?: string;
            /**
             * @description Homework Description
             * @example Логорифмы #10 (Иванов Д.П.)
             */
            content?: string;
            /**
             * Format: date-time
             * @description Homework Date begin
             * @example 2025-01-01T03:00:00.002Z
             */
            dateBegin?: string;
            /**
             * Format: date-time
             * @description Homework Date end
             * @example 2025-02-01T03:00:00.002Z
             */
            dateEnd?: string;
            /**
             * @description Homework Curator ID
             * @example f7c5208d-911c-43db-84aa-19eda9ae50a5
             */
            curatorId?: string;
            /**
             * @description Meeting Theme ID
             * @example f7c5208d-911c-43db-84aa-19eda9ae50a5
             */
            themeId?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    "UserController-findAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "UserController-create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateUserDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "UserController-findOne": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "UserController-remove": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "UserController-update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateUserDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "AuthController-login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "AuthController-refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "AuthController-current": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "AuthController-logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "ContactController-findAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "ContactController-create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateContactDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "ContactController-findOne": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "ContactController-delete": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "ContactController-update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateContactDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "ContactController-findByUserId": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "FeedbackController-findAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "FeedbackController-create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateFeedbackDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "FeedbackController-findOne": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "FeedbackController-remove": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "FeedbackController-update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateFeedbackDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "AchievementController-findAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "AchievementController-create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateAchievementDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "AchievementController-findOne": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "AchievementController-remove": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "AchievementController-update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateAchievementDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "AchievementController-findByUserId": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "GroupController-findAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Find All Groups successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GroupResponse"][];
                };
            };
            /** @description Groups Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "GroupController-create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateGroupDto"];
            };
        };
        responses: {
            /** @description Group created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GroupResponse"];
                };
            };
        };
    };
    "GroupController-findOne": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Find Group by ID successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GroupResponse"];
                };
            };
            /** @description Group by ID Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "GroupController-remove": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Delete Group by ID successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GroupResponse"];
                };
            };
        };
    };
    "GroupController-update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateGroupDto"];
            };
        };
        responses: {
            /** @description Update Group by ID successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GroupResponse"];
                };
            };
        };
    };
    "GroupController-appendUser": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Append User in Group successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "GroupController-removeUser": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Remove User from Group successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "CourseController-findAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "CourseController-create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateCourseDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "CourseController-findOne": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "CourseController-remove": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "CourseController-update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateCourseDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "DisciplineController-findAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "DisciplineController-create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateDisciplineDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "DisciplineController-findOne": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "DisciplineController-remove": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "DisciplineController-update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateDisciplineDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "ThemeController-findAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "ThemeController-create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateThemeDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "ThemeController-findOne": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "ThemeController-remove": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "ThemeController-update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateThemeDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "UserPriorityController-findAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "UserPriorityController-create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateUserPriorityDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "UserPriorityController-findByUserID": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "UserPriorityController-findOne": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "UserPriorityController-update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
                userId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateUserPriorityDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "UserPriorityController-remove": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "GradeController-findAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "GradeController-create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateGradeDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "GradeController-findOne": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "GradeController-remove": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "GradeController-update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateGradeDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "MeetingController-findAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "MeetingController-create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateMeetingDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "MeetingController-findOne": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "MeetingController-remove": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "MeetingController-update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateMeetingDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "MeetingController-getFeedbacks": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "MeetingController-appendFeedback": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "MeetingController-removeFeedback": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "MeetingController-appendUser": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "MeetingController-removeUser": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "MeetingController-updateUser": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "HomeworkController-findAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "HomeworkController-create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateHomeworkDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "HomeworkController-findOne": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "HomeworkController-remove": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "HomeworkController-update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateHomeworkDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
